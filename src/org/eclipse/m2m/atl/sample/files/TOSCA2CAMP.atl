-- @path MMTOSCA=/Users/kena/git/T2C/src/kr/ac/hanyang/tosca2camp/atl/modelgenerator/model.ecore
-- @path MMCAMP=/Users/kena/git/oCamp/src/kr/ac/hanyang/oCamp/atl/CAMP.ecore

module TOSCA2CAMP;
create OUT: MMCAMP from IN: MMTOSCA;

--helper def: convertType(type: String) :Set(String) =
--	if type = 'tosca.nodes.root' 			  	  then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.base.EmptyMachine'} 	else
--	if type = 'tosca.nodes.Compute' 			  then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.base.EmptyMachine'} 	else
--	if type = 'tosca.nodes.WebServer' 			  then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.web.tomcat.Tomcat8'} 	else
--	if type = 'tosca.nodes.WebApplication' 		  then
		-- Set{'kr.ac.hanyang.oCamp.entities.artifacts.War'}	else
--	if type = 'tosca.nodes.SoftwareComponent'     then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.base.EmptyMachine'}  	else
--	if type = 'tosca.nodes.ObjectStorage'		  then Set{''} 	else
--	if type = 'tosca.nodes.LoadBalancer'		  then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.nginx.LoadBalancerCluster'} 	else
--	if type = 'tosca.nodes.DBMS'			 	  then
		-- Set{'kr.ac.hanyang.oCamp.entities.services.database.mysql.MySQL'} 	else
--	if type = 'tosca.nodes.Database'    		  then
		-- Set{'kr.ac.hanyang.oCamp.entities.artifacts.Script'} 	else
--	if type = 'tosca.nodes.Container.Runtime'     then Set{''} 	else
--	if type = 'tosca.nodes.Container.Application' then Set{''} 	else
--	if type = 'tosca.nodes.BlockStorage'		  then Set{''} 	else 
--		type
--	endif endif endif endif endif endif endif endif endif endif endif endif; 
--
--helper def: convertProperty(property: String) :Set(String) =
--	if property = 'component_version' 	  then Set{''} 	else
--	if property = 'context_root' 		  then Set{''} 	else
--	if property = 'password' 			  then Set{''} 	else
--	if property = 'user' 	        	  then Set{''} 	else
--	if property = 'port'     			  then Set{''} 	else
--	if property = 'name'		          then Set{''} 	else
--	if property = 'size'		 		  then Set{''} 	else
--	if property = 'maxsize'			 	  then Set{''} 	else
--	if property = 'volume_id'    		  then Set{''} 	else
--	if property = 'snapshot_id'    		  then Set{''} 	else
--	if property = 'algorithm'			  then Set{''} 	else
--	if property = 'private_address'		  then Set{''} 	else
--	if property = 'public_address'		  then Set{''} 	else
--	if property = 'networks'		  	  then Set{''} 	else
--	if property = 'ports'			      then Set{''} 	else
--		property
--	endif endif endif endif endif endif endif endif endif endif endif endif endif endif
		-- endif; 
--          
--
--helper context MMTOSCA!TopologyTemplateModel def: getNodes(): Set(MMTOSCA!NodeTemplate)
		-- = 
--		self -> select(a | a.oclIsTypeOf(MMTOSCA!NodeTemplateModel));

--helper context MMTOSCA!ServiceTemplateModel def : isRoot() : Boolean =
--	self.refImmediateComposite().oclIsUndefined();
--	-- refImmediateComposite() is a reflective operation that returns the immediate
--- composite (e.g. the immediate container) of self
--	-- So if there is no immediate composite then the current node is the root (we
--- suppose in our example that there is only one root).
--
--	
--helper context MMTOSCA!TopologyTemplateModel def : getAllChildren () :
		-- OrderedSet(MMTOSCA!NodeTemplateModel) =
--	self.children->iterate(child ; elements : OrderedSet(MMTOSCA!NodeTemplateModel) = 
--		OrderedSet{} | 
--		if child.oclIsTypeOf(MMTree!NodeTemplateModel) then
--			--elements.union(child.getAllChildren ()) -- NODE : recursive call
--		--else
--				elements.append(child) -- LEAF
--		else 
--				'nothing'
--		endif
--		)
--	;	
--	
--rule TreeNodeRoot2RootElement {
--	from
--		rt : MMTOSCA!ServiceTemplateModel (rt.isRoot())
--	to
--		lstRt : MMCAMP!DeploymentPlan (
--			name <- rt.name,
--			services <- elmLst
--		),
--		elmLst : distinct MMCAMP!Service foreach(service in rt.getAllChildren())(
--			name <- service.name
--		)
--}
	
rule Leaf2CommonElement {
	from
		s: MMTOSCA!ServiceTemplateModel
	to
		t: MMCAMP!DeploymentPlan (
			name <- 'name'
		)
}	

--rule st2dp{
--	from
--		n: MMTOSCA!TopologyTemplateModel
--	to 
--		srv: MMCAMP!DeploymentPlan(
--			name <- 'name'
--		)
--}
--
--
--rule node2service{
--	from
--		n: MMTOSCA!NodeTemplateModel
--	to 
--		srv: MMCAMP!Service(
--			name <- n.name
--		)		
--}
--rule tt2camp{
--	from
--		n: MMTOSCA!ServiceTemplateModel
--	to 
--		srv: MMCAMP!DeploymentPlan(
--			name <- 'name'
--		)
--}



--rule chars{
--	from
--		n: MMTOSCA!NodeTemplateModel
--	to
--		chr: MMCAMP!ServiceCharacteristic(
--			characteristicType <- thisModule.convertType(n.type) -> first()	
--		) 
--}
